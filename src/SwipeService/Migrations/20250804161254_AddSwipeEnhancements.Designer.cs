// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SwipeService.Data;

#nullable disable

namespace SwipeService.Migrations
{
    [DbContext(typeof(SwipeContext))]
    [Migration("20250804161254_AddSwipeEnhancements")]
    partial class AddSwipeEnhancements
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("SwipeService.Models.Match", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("UnmatchedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UnmatchedByUserId")
                        .HasColumnType("int");

                    b.Property<int>("User1Id")
                        .HasColumnType("int");

                    b.Property<int>("User2Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("User1Id")
                        .HasDatabaseName("IX_Match_User1Id");

                    b.HasIndex("User2Id")
                        .HasDatabaseName("IX_Match_User2Id");

                    b.HasIndex("User1Id", "User2Id")
                        .IsUnique()
                        .HasDatabaseName("IX_Match_User1Id_User2Id");

                    b.ToTable("Matches", t =>
                        {
                            t.HasCheckConstraint("CK_Match_UserOrder", "User1Id < User2Id");
                        });
                });

            modelBuilder.Entity("SwipeService.Models.Swipe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeviceInfo")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsLike")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("MatchId")
                        .HasColumnType("int");

                    b.Property<int>("TargetUserId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("UserLocation")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("MatchId");

                    b.HasIndex("TargetUserId")
                        .HasDatabaseName("IX_TargetUserId");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_UserId");

                    b.HasIndex("UserId", "TargetUserId")
                        .IsUnique()
                        .HasDatabaseName("IX_UserId_TargetUserId");

                    b.ToTable("Swipes");
                });

            modelBuilder.Entity("SwipeService.Models.Swipe", b =>
                {
                    b.HasOne("SwipeService.Models.Match", "Match")
                        .WithMany("Swipes")
                        .HasForeignKey("MatchId");

                    b.Navigation("Match");
                });

            modelBuilder.Entity("SwipeService.Models.Match", b =>
                {
                    b.Navigation("Swipes");
                });
#pragma warning restore 612, 618
        }
    }
}
